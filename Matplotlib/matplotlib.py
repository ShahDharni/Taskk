# -*- coding: utf-8 -*-
"""Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1irFeyFpzEAB5bq9N209uzuqr6nDTcBeS
"""

## Importing
from matplotlib import pyplot as plt

## or
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.image as mpimg
# %matplotlib inline

"""**Where do we use line charts?**


Line graphs are used to track changes over short and long periods of time. When smaller changes exist, line graphs are better to use than bar graphs. Line graphs can also be used to compare changes over the same period of time for more than one group.

This creates a figure paired with axes
"""

fig,ax=plt.subplots()
x=np.linspace(0,10,300)
x
print()
y=np.sin(x)+x
y
print()
ax.plot(x,y)
fig.show()

"""The figsize argument sets the figure length and width:
fig, ax = plt.subplots(figsize=(15,10))

The suptitle method sets the figure's title:

fig.suptitle('Our First plot', fontsize=40)

We can also set line color, style, and width.To change the line appearance the linestyles is used. Additional width will make our line a bit thicker for a better visual appearance.



"""

color = 'g'
linestyle="dashed"
linewidth= 4
fig,ax=plt.subplots(figsize=(6,4))
fig.suptitle("Our First Plot",fontsize=20)
ax.plot(x,y,color=color,linewidth=linewidth,linestyle=linestyle)
plt.show()

"""**Axes settings**

The Axes object has two child objects: xaxis and yaxis. Each of them has its own ticks with bound labels â€” in our case, the numbers under the axis line. We can subsequently iterate through them, changing their size
"""

from matplotlib.axis import Tick
fig,ax=plt.subplots(figsize=(6,6))
fig.suptitle("Our First Plot",fontsize=40)
ax.plot(x,y,color=color,linewidth=linewidth,linestyle=linestyle)
ax.set_ylabel=plt.ylabel("function",fontsize=30)
ax.set_xlabel=plt.xlabel("arguments",fontsize=30)
for xtick in ax.xaxis.get_major_ticks():
  xtick.label.set_fontsize(18)
for ytick in ax.yaxis.get_major_ticks():
  ytick.label.set_fontsize(35)
plt.show()

"""**Note: It is a good practice to close the figure windows when we don't need them it keeps the code clean and saves a lot of memory. To do this, we can use the plt.close(fig) command. Use the plt.close() command to close all open figure windows. If you need to delete a particular figure including associated axes with data, use fig.clf(). It deletes the figure content but leaves the figure window open.**

**Multiple subplots** - The plt.subplots() method is the best way to handle several subplots at once. Let's create a plot in three parts:
"""

fig,axes=plt.subplots(1,3,figsize=(16,8))
ax1,ax2,ax3=axes
x=np.linspace(1,10,200)
y1=np.sin(x)
y2=np.cos(x)
y3=np.tan(x)
ax1.set_ylabel('sin(x)',fontsize=30)
ax1.set_xlabel('x',fontsize=30)

ax2.set_ylabel('cos(x)',fontsize=30)
ax2.set_xlabel('x',fontsize=30)


ax3.set_ylabel('tan(x)',fontsize=30)
ax3.set_xlabel('x',fontsize=30)
fig.tight_layout(pad=2)
ax1.plot(x,y1,c="g",linewidth=3)
ax2.plot(x,y2,c="b",linewidth=3)
ax3.plot(x,y3,c="r",linewidth=3)
plt.show()

"""**Let's take another example on world population**"""

year=[1,1000,1500,1600,1700,1750,1800,1850,1900,1950,1955,1960,1965,1970,1980,1985,1990,
       1995,2000,2005,2010,2015]
pops=[200,400,458,580,682,791,1000,1262,1650,2525,2758,3018,3322,3682,
      4061,4440,4853,5310,5735,6127,6520,7349]
plt.plot(year,pops)
plt.show()

"""**Adding labels and custom line color**"""

years=[1950,1955,1960,1965,1970,1980,1985,1990,1995,2000,2005,2010,2015]
pops=[2.5,2.7,3.0,3.3,3.6,4.0,4.4,4.8,5.3,5.7,6.1,6.5,7.3]
plt.plot(years,pops,color=(255/255,100/255,200/255))
plt.ylabel("Population in Billions")
plt.xlabel("Population growth by year")
plt.title("Population Growth")
plt.show()

"""**Legends, Titles, Labels**"""

x=[2,4,5]
y=[7,9,5]

x1=[7,6,5]
y1=[7,6,5]

plt.plot(x,y,label="First Line")
plt.plot(x1,y1,label="Second Line")

plt.title("Interesting Graph Check it out")
plt.xlabel("Plot number")
plt.ylabel("Important Var")
plt.show()

years=[1950,1955,1960,1965,1970,1980,1985,1990,1995,2000,2005,2010,2015]
pops=[2.5,2.7,3.0,3.3,3.6,4.0,4.4,4.8,5.3,5.7,6.1,6.5,7.3]
death=[1.2,1.1,1.2,2.1,2.0,2.3,1.8,1.9,2.6,1.6,2.4,2.4,4.0]
plt.plot(years,pops,"--",color=(200/255,100/255,225/255))
plt.plot(years,death,color=(.6,.2,1))
plt.xlabel("Population in Billions")
plt.ylabel("Population growth in years")
plt.title("Population Growth")
plt.show()

"""**Configuring the graphs**"""

years=[1950,1955,1960,1965,1970,1980,1985,1990,1995,2000,2005,2010,2015]
pops=[2.5,2.7,3.0,3.3,3.6,4.0,4.4,4.8,5.3,5.7,6.1,6.5,7.3]
death=[1.2,1.1,1.2,2.1,2.0,2.3,1.8,1.9,2.6,1.6,2.4,2.4,4.0]
d=plt.plot(years,pops,years,death)
plt.grid(True)
plt.setp(d,color=(1,.2,.4), marker="*")
plt.show()

"""***Pie Chart***

A pie chart is a circular plot that shows how data items relate to one another. The pie chart total area is the data percentage. The area of slices (also called wedges) represents the percentage of data parts and shows the relation between them. Pie charts are good when we need to compare parts of a whole.

**Creating a pie chart**

To create a pie chart using matplotlib, refer to the pie() function.

plt.pie(data)

where data is an array of data values that you want to plot.

There are many other optional parameters that can pass to plt.pie().

Some of them include:

**explode** allows separating slices of a pie chart

**labels** is a list of strings that sets the label of each corresponding slice

**labeldistance** determines the radial distance at which pie labels are drawn (default is 1.1)

**color** colors slices

**shadow** creates the shadow of a slice

**startangle** lets you choose the starting angle of a plot

**wedgeprops** lets you tune various slice parameters

**radius** sets the radius of the circle(by default, it is 1)

Let's create simple pie chart. Assume our data represents the result of a survey on a favorite programming language:

**Where we can use Pie Charts ?**

Pie charts are best to use when you are trying to compare parts of a whole. They do not show changes over time.
"""

data=[23,34,54,56,78]
plt.pie(data)
plt.show()

"""**Labels**"""

data=[23,34,54,56,78]
labels=("Accounts","Stats","Management","Economics","English")
plt.pie(data,labels=labels)
plt.show()

plt.figure(figsize=(6,7))
plt.pie(data)
plt.title("The result of Commerce subjects survey")
plt.legend(labels)
plt.show()

"""**Explode**

The explode parameter in pie charts separates a slice from the main pie. To highlight some of the fractions, we need to pass a list of values to the explode parameter. The values determine how far we want to separate this category from the main pie.
"""

explode=[0,0.08,0.06,0,0]
plt.pie((data),explode=explode,labels=labels)
plt.show

"""**Colors and shadows**
To make our graph even more illustrative, we can pass a list of colors to the color parameter and add a shadow underneath by setting the shadow to True
"""

colors=["wheat","indianred","sandybrown", "lightsalmon","lightcoral"]
plt.pie(data,colors=colors,shadow=True,explode=explode,labels=labels)
labels=("Accounts","Stats","Management","Economics","Audit")

plt.show()

"""**Display the value**
The autopct parameter displays the percent value on the slices. If autopct is %.2f, then for each pie slice, the format string is %.2f, where %is a special character that tells when to type the value, f sets the result to be a floating-point type, and the .2 sets a limit to only 2 digits after the point.
"""

plt.pie(data, autopct='%.2f%%',colors=colors,shadow=True,explode=explode,labels=labels)
plt.show()

"""**Starting angle**
By default, pie charts are plotted from the x-axis; slices are plotted counterclockwise:

The startangle parameter lets us define the angle where we want to initiate our pie (the default angle is 0). You can choose whether you want to plot the slices counterclockwise by changing the counterclock parameter; it is True by default.

Let's assume we want the slices to start at 90 degrees.
"""

fig,axes=plt.subplots(1,2,figsize=(10,6))
ax1,ax2=axes
ax1.pie(data, labels=labels , colors=colors, startangle=90)
ax2.pie(data,labels=labels,colors=colors, startangle=90,counterclock=False)
ax1.set_title("Starting the plot at 90")
ax2.set_title("Plotting Clockwise")
plt.show()

"""***Doughnut Chart***

A doughnut chart is very similar to a pie chart. However, since a doughnut chart has an opening at the center, it makes slices look more like bars. Unfortunately, there is no specific method for plotting a doughnut chart in the matplotlib library. But we can use the wedgeprops parameter to define the width of the wedges.
"""

plt.pie(data,colors=colors,labels=labels,startangle=90,wedgeprops={'width':0.2})
plt.show()

fig,axes=plt.subplots(figsize=(8,6))
width=0.3

p_pie=plt.pie(data,radius=1,labels=labels,colors=colors,startangle=90,wedgeprops={'width':width})
fruits_labels=['Apple','Mango','Kiwi','Grapes']
fruits_colors=['lightsalmon','tomato','wheat','pink']
fruits_data=[4,5,6,7]
fruits=plt.pie(fruits_data, radius=1-width, labels=fruits_labels, colors= fruits_colors, labeldistance= 0.7, wedgeprops={'width': width})
plt.show()

"""**Heatmap**

A heatmap is a graph that extensively uses color for data visualization. The colors depend on several independent variables. There are two different kinds of heatmap: a cluster heatmap (a cell-matrix of different colors) and a spatial heatmap (it has no cells; the variable variation is considered continuous).

**Dealing with data**
"""

df=pd.read_csv("Iris.csv")
df

df.head()

df=df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]
df.corr()

"""**Simple Heatmap**"""

plt.imshow(df.corr())

"""**changing color and size**"""

plt.imshow(df.corr(),cmap='Spectral')
plt.colorbar()
plt.show()

plt.imshow(df.corr(),cmap='Spectral')
plt.colorbar(orientation="horizontal")
plt.show()

"""We can also change the size of plot just need the plt.gcf().set_size_inches() function it takes two integers as its arguments."""

plt.imshow(df.corr(),cmap='Spectral')
plt.colorbar(orientation="horizontal")
plt.gcf().set_size_inches(8,8)
plt.show()

"""**Adding labels**

We can also add labels to our plot to make it more comprehensive. To add them to the plot, use functions plt.xticks() and plt.yticks() for X- and Y-axes.
"""

plt.imshow(df.corr(),cmap='Spectral')
plt.colorbar()
plt.gcf().set_size_inches(10,10)
plt.xticks(range(len(df.corr().columns)), df.corr().columns)
plt.yticks(range(len(df.corr().columns)), df.corr().columns)
plt.show()

plt.imshow(df.corr(),cmap='Spectral')
plt.colorbar()
plt.gcf().set_size_inches(10,10)
plt.xticks(range(len(df.corr().columns)), df.corr().columns)
plt.yticks(range(len(df.corr().columns)), df.corr().columns)
labels=df.corr().values
for a in range(labels.shape[0]):
  for b in range(labels.shape[1]):
    plt.text(a,b,'{:.2f}'.format(labels[b,a]),ha='center',va='center',color='black')
  plt.title("Iris Species \n",fontsize=14)
plt.show()

"""**Bar Graph**

A bar chart is a diagram where variables are represented as rectangular bars the taller or longer the bar, the higher value it represents. Usually, one axis of a bar chart represents a category, and the other is its value. A bar chart is used to compare discrete data, such as occurrences or proportions.

**Creating a bar chart**

To create a bar chart with matplotlib, simply need to call the bar() function. The syntax for this method is as follows:

plt.bar(x, height, width, bottom, align)

where:

x is a category

height is the corresponding value.

width is how wide you want your bars(default value is 0.8).

bottom is the base of the y-coordinate; in other words, it is the point where your bars start. The (default is 0)

align is where you want to place your category names. By default, they are positioned at the bar center

**Let's create our first simple bar graph. Suppose you want to compare the box office of the movies released in 2020 in the India.**
"""

films = ['Tanhaji', 'Baaghi 3', 'Love Aaj Kal', 'Jawaani Jaaneman', 'Street Dancer 3D']
box_office = [367.65, 137.05, 44.77, 52.63, 97]
plt.bar(films,box_office,edgecolor="black")
plt.show()

"""**Labels**"""

plt.bar(films,box_office,edgecolor="black")
plt.ylabel("Box Office (crore . Rs)")
plt.xlabel("Film Title")
plt.title("Box office of 5 different films of 2020 in India")
plt.show()

"""**Gridlines**

Another way to make chart more representative is adding gridlines. To add gridline call the grid() method and pass it as the parameters for color, linestyle, width, and axis. To make gridlines transparent need to tweak the alpha parameter. It can range from 0.0 to 1.0
"""

plt.bar(films,box_office,edgecolor="black")
plt.grid(color="green",linestyle=":",linewidth=1.0,axis='y',alpha=0.5)
plt.ylabel("Box Office (crore . Rs)")
plt.xlabel("Film Title")
plt.title("Box office of 5 different films of 2020 in India")
plt.show()

plt.bar([1,3,5,7,9],[6,7,2,3,4],label="Example One",edgecolor="black")
plt.bar([2,4,6,8,10],[9,2,3,1,6],label="Example Two",color="g",edgecolor="black")
plt.legend()
plt.xlabel("Bar number")
plt.ylabel("Bar height")
plt.title("Bar Graph")
plt.show()

"""**Horizontal Bar Graph**"""

plt.barh(films,box_office)
plt.ylabel("Box Office (crore . Rs)")
plt.xlabel("Film Title")
plt.title("Box office of 5 different films of 2020 in India")
plt.show()

"""**Grouped Bar Plot**

Plotting multiple bars next to each other can come in handy when we need to compare two or more data series that share categories.
"""

korea_scores=(554,536,538)
canada_scores=(518,523,525)
china_scores=(413,570,580)
france_scores=(495,505,499)
index=np.arange(3)
bar_width=0.2
plt.figure(figsize=(10,6))
k1=plt.bar(index,korea_scores,bar_width,alpha=.9,label="Korea",edgecolor="black")
c1=plt.bar(index + bar_width,canada_scores,bar_width,alpha=.9,label="Canada",edgecolor="black")
ch1=plt.bar(index + bar_width*2,china_scores,bar_width,alpha=.9,label="China",edgecolor="black")
f1=plt.bar(index + bar_width*3,france_scores,bar_width,alpha=.9,label="France",edgecolor="black")

plt.xticks(index+.6/2,("Mathematics","Reading","Science"))
plt.xlabel("Subject")
plt.ylabel("Mean Score in PISA")
plt.title("Test score by country")
plt.grid(True)
plt.legend()
plt.show()

"""**Stacked Bar Plot**

A stacked bar chart is a type of graph that displays multiple data points on top of each other. In a stacked bar chart, each bar represents a single category that contains smaller categories. Use it to demonstrate how parts relate to the total amount.

In stacked bar plots need to provide the additional bottom parameter that indicates where the bar should start.
"""

years = ['2016', '2017', '2018', '2019']
rice = [57, 50, 47, 30]
wheat = [43, 50, 53, 70]

plt.figure(figsize=(10,7))
plt.bar(years,rice,label="Rice",edgecolor="black")
plt.bar(years,wheat,bottom=rice,label="Wheat",edgecolor="black")

plt.xlabel("Years",fontsize=14)
plt.ylabel("Preferences",fontsize=14)
plt.title("The result of wheat rice export")
plt.legend()
plt.show()

years = ['2016', '2017', '2018', '2019']
rice = np.array([57, 50, 47, 30])
wheat = np.array([43, 50, 53, 70])
mustard=np.array([10, 16, 13, 15])

plt.figure(figsize=(10,7))
plt.bar(years,rice,label="Rice",edgecolor="black")
plt.bar(years,wheat,bottom=rice,label="Wheat",edgecolor="black")
plt.bar(years,mustard,bottom=wheat+rice,label="Mustard",edgecolor="black")

plt.xlabel("Years",fontsize=14)
plt.ylabel("Preferences",fontsize=14)
plt.title("The result of wheat,rice and mustard export")
plt.legend()
plt.show()

"""**Histogram**

A histogram is a graphical display of data that organizes groups of data points into ranges. These ranges are represented by bars. It resembles a bar chart, but it's not quite the same. The key difference is that you use a bar chart for categorical data representation, while a histogram displays only numerical data. Examples of this might be age groups, or scores on a test. Rather than showing every single age a group might be, maybe you just show people from 20-25, 25-30... and so on.

**Creating a simple histogram**
"""

data = [163, 163, 164, 170, 180, 172, 173, 190,175,180]
plt.hist(data,edgecolor="Black")

"""To make it clearer, we need to specify the values for plt.title(), plt.xlabel(), and plt.ylabel(). The color can be change by using the color argument and adding a border between adjacent bars with edgecolor"""

plt.hist(data,color='pink',edgecolor='black')
plt.xlabel("Height in cm")
plt.ylabel("Number of people")
plt.title("Heights")
plt.show()

"""**Changing bins**

Let's say we want to divide our data values into 3 groups: from 160 to 170 cm, from 170 to 180, and from 180 to 190. To do that, we need to pass a list of these values to the bins argument
"""

bins = [160, 170, 180, 190]
plt.hist(data,bins=bins,color="pink",edgecolor="black")
plt.show()

"""The bins argument can take not only a list but also an int. A list defines bin edges. An int defines the number of equal-width bins. So, if we want to have four bins in our histogram, we simply write bins=4. There's also a third option â€“ use a str as bins value. It has to be a name of one of the binning functions supported by numpy, such as 'rice', 'scott', 'sqrt', and so on

**Cutting off data**

Sometimes, you just don't need all the data that's in there. All you need to do is to pass a tuple to the range argument that specifies the start and end values. Assume that we only want to see people from 180 to 190 cm in our histogram:
"""

plt.hist(data, color="pink", edgecolor='black', range=(180, 190))

"""**Plotting Multiple Datasets**

To plot multiple datasets together to compare them you need to pass a list of datasets to plt.hist() and, preferably, add plt.legend() to make your plot easier to interpret.
"""

my_data = [163, 163, 164, 170, 170, 172, 173, 190,190,180]
sili_data = [161, 172, 174, 175, 181, 183, 186, 190,180,185]
bins = [160, 170, 180, 190]
names=["Mine friend's","sili's friend"]
plt.hist([my_data,sili_data],bins=bins, label=names,edgecolor="black")
plt.title("Mine and Sili's friend height")
plt.ylabel("Number of people")
plt.xlabel("Height in cms")

plt.legend()
plt.show()

"""The above chart is bydefault bar chart.Let's stack the values on top of each other."""

my_data = [163, 163, 164, 170, 170, 172, 173, 190,190,180]
sili_data = [161, 172, 174, 175, 181, 183, 186, 190,180,185]
bins = [160, 170, 180, 190]
names=["Mine friend's","sili's friend"]
plt.hist([my_data,sili_data],bins=bins, label=names,stacked=True, edgecolor="black")
plt.title("Mine and Sili's friend height")
plt.ylabel("Number of people")
plt.xlabel("Height in cms")

plt.legend()
plt.show()

population_ages = [22,55,62,45,21,22,34,42,42,4,99,102,110,120,121,122,130,111,115,112,80,75,65,54,44,43,42,48]
bins = [0,10,20,30,40,50,60,70,80,90,100,110,120,130]
plt.hist(population_ages, bins, histtype="bar",rwidth=0.8,edgecolor="black")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Population")
plt.show()

"""**Scatter Plots**

A scatter plot (aka scatter chart, scatter graph) uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables.

**Where to use scatter plots ?**

Scatter plotsâ€™ primary uses are to observe and show relationships between two numeric variables
"""

x = [1,2,3,4,5,6,7,8]
y = [5,2,4,2,1,4,5,2]
plt.scatter(x,y,label="Scatter",color="b",marker="p",s=20)
plt.legend()
plt.show()

"""**Stack Plots**

A stack plot is basically like a pie-chart, only over time.

Let's consider a situation where we have 24 hours in a day, and we'd like to see how we're spending our time. We'll divide our activities into: Sleeping, eating, working, and playing.

We're going to assume that we're tracking this over the course of 5 days, so our starting data will look like:

**Where to use stack plots ?**

Stack plots can also be used to visualize time series data

Baseline is a parameter

Baseline:- {â€˜zeroâ€™, â€˜symâ€™, â€˜wiggleâ€™, â€˜weighted_wiggleâ€™}

Zero means constant baseline.

Sym which is symmetric around zero value.

wiggle it will minimize value of the sum of squares.
"""

days = [1,2,3,4,5]

sleeping = [7,8,6,11,7]
eating =   [2,3,4,3,2]
working =  [7,8,7,2,2]
playing =  [8,5,7,8,13]

plt.stackplot(days,sleeping,eating,working,playing, colors=["C0","C1","C2","C4"])
plt.xlabel("x")
plt.ylabel("y")
plt.title("Interesting Graph")
plt.show()

days = [1,2,3,4,5]

sleeping = [7,8,6,11,7]
eating =   [2,3,4,3,2]
working =  [7,8,7,2,2]
playing =  [8,5,7,8,13]

plt.plot([],[],color="m",label="Sleeping",linewidth=5)
plt.plot([],[],color="k",label="Eating",linewidth=5)
plt.plot([],[],color="b",label="Working",linewidth=5)
plt.plot([],[],color="g",label="Playing",linewidth=5)

plt.stackplot(days,sleeping,eating,working,playing,colors=["C5","C6","C7","C8"])
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Interesting Graph \n Check it out")
plt.show()

"""
**3D Graphs**

"""

style.available

from matplotlib import style
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt

style.use("Solarize_Light2")
fig=plt.figure()
ax1=fig.add_subplot(111,projection="3d")

x = [1,2,3,4,5,6,7,8,9,10]
y = [5,6,7,8,2,5,6,3,7,2]
z = [1,2,6,3,2,7,3,3,7,2]

ax1.plot(x,y,z)
ax1.set_xlabel("x label")
ax1.set_ylabel("y label")
ax1.set_zlabel("z label")

plt.show()

"""**3D Scatter Plot**"""

from matplotlib import style
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt

style.use("tableau-colorblind10")
fig=plt.figure()
ax1=fig.add_subplot(111,projection="3d")

x = [1,2,3,4,5,6,7,8,9,10]
y = [5,6,7,8,2,5,6,3,7,2]
z = [1,2,6,3,2,7,3,3,7,2]

x2 = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]
y2 = [-5,-6,-7,-8,-2,-5,-6,-3,-7,-2]
z2 = [1,2,6,3,2,7,3,3,7,2]

ax1.scatter(x,y,z,c='g',marker="o")
ax1.scatter(x2,y2,z2,c='m',marker=">")

ax1.set_xlabel("x axis")
ax1.set_ylabel("y axis")
ax1.set_zlabel("z axis")

plt.show()

"""**3D Bar Graph**"""

from matplotlib import style
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

style.use("tableau-colorblind10")
fig=plt.figure()
ax1=fig.add_subplot(111,projection="3d")

x = [1,2,3,4,5,6,7,8,9,10]
y = [5,6,7,8,2,5,6,3,7,2]
z=np.zeros(10)

x1=np.ones(10)
y1=np.ones(10)
z1=[1,3,4,5,6,7,9,10,5,4]

ax1.bar3d(x,y,z,x1,y1,z1)
ax1.set_xlabel("x")
ax1.set_xlabel("y")
ax1.set_xlabel("z")
plt.show()

from matplotlib import style
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt

style.use("ggplot")
fig=plt.figure()
ax1=fig.add_subplot(111,projection="3d")
x, y, z = axes3d.get_test_data()

ax1.plot_wireframe(x,y,z,rstride=3, cstride=3, color="C1")
ax1.set_xlabel("x label")
ax1.set_ylabel("y label")
ax1.set_zlabel("z label")

plt.show()